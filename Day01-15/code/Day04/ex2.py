# 练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。
# 提示：两个数的最大公约数是两个数的公共因子中最大的那个数；
# 两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。
'''
最大公约数和最小公倍数

Verison: 0.1
Author: WasserWelt
'''
# 印象中是辗转相除法最快
# 作者给的示例代码是暴力的

x = int(input("x="))
y = int(input("y="))

if x > y:
    x, y = y, x  # Python很神奇的语法之一

print("Way 1")
'''
比如现在要求这两个数 32，26的最大公约数，解法如下：
32/26=1...6  (此行除数26作下一行的被除数，余数作为除数)
26/6=4...2  (此行同理)
6/2=3...0  (此处余数为零，意味着最大公约数就是2)
反复把一个式子中的除数当作被除数去除余数，直到最后余数等于0。
最大公约数就是最后那个式子的除数，本例就是2。
————————————————
版权声明：本文为CSDN博主「Terrymercy.」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_64188098/article/details/126982221
'''
u, v = x, y  # 为了输出初始值，还要多搞个变量
while(v != 0):
    '''
    temp = x%y
    x=y
    y=temp
    除数为新的被除数
    余数为新的除数24
    '''
    u, v = v, (u % v)
print('%d和%d的最大公约数是%d' % (x, y, u))
print('%d和%d的最小公倍数是%d' % (x, y, x * y // u))


print("Way 2")
for factor in range(x, 0, -1):
    # 从大到小找
    if x % factor == 0 and y % factor == 0:
        print('%d和%d的最大公约数是%d' % (x, y, factor))
        print('%d和%d的最小公倍数是%d' % (x, y, x * y // factor))
        break
